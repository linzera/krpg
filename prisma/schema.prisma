// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Campaign {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    owner   User   @relation(fields: [ownerId], references: [id])
    ownerId String

    name String

    CampaignSystem   CampaignSystem @relation(fields: [campaignSystemId], references: [id])
    campaignSystemId String

    members CampaignMember[]

    @@index([ownerId], name: "ownerId")
    @@index([campaignSystemId])
}

model CampaignSystem {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name String

    Campaign Campaign[]

    @@index([name], name: "name")
}

model CampaignMember {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Should be an enum in the future
    role String @default("member")

    campaign   Campaign @relation(fields: [campaignId], references: [id])
    campaignId String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    characterRecord CampaignCharacterRecord?

    @@index([userId])
    @@index([campaignId])
}

model CampaignCharacterRecord {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    campaignMember   CampaignMember @relation(fields: [campaignMemberId], references: [id])
    campaignMemberId String         @unique
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id             String           @id @default(cuid())
    name           String?
    email          String?          @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    Campaign       Campaign[]
    CampaignMember CampaignMember[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
